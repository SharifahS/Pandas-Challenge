{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note\n",
    "* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import pandas as pd\n",
    "\n",
    "# File to Load (Remember to Change These)\n",
    "file_to_load = \"Resources/purchase_data.csv\"\n",
    "\n",
    "# Read Purchasing File and store into Pandas data frame\n",
    "purchase_data = pd.read_csv(file_to_load)\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Player Count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Display the total number of players\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Player</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Total Player\n",
       "0           576"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_player =  purchase_data['SN'].nunique()\n",
    "total_frame = pd.DataFrame({'Total Player': [total_player]})\n",
    "total_frame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Purchasing Analysis (Total)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Run basic calculations to obtain number of unique items, average price, etc.\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display the summary data frame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unique Items</th>\n",
       "      <th>Average Price</th>\n",
       "      <th>Number of Purchases</th>\n",
       "      <th>Total Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>179</td>\n",
       "      <td>$3.05</td>\n",
       "      <td>780</td>\n",
       "      <td>$2379.77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unique Items Average Price  Number of Purchases Total Revenue\n",
       "0           179         $3.05                  780      $2379.77"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "purchase_data.loc[:, 'Price'] = purchase_data['Price'].astype('float')\n",
    "Total_Rev = purchase_data['Price'].sum()\n",
    "unique_item = purchase_data['Item Name'].nunique()\n",
    "AV_price = purchase_data['Price'].mean()\n",
    "num_of_purchases = purchase_data['Purchase ID'].count()\n",
    "\n",
    "purchasing_analysis = pd.DataFrame({'Unique Items': [unique_item], \n",
    "                                    'Average Price': [AV_price], \n",
    "                                    'Number of Purchases': [num_of_purchases], \n",
    "                                    'Total Revenue': [Total_Rev]})\n",
    "\n",
    "purchasing_analysis['Average Price'] = purchasing_analysis['Average Price'].apply(lambda x: '${:.3}'.format((x)))\n",
    "purchasing_analysis['Total Revenue'] = purchasing_analysis['Total Revenue'].apply(lambda x: '${:.6}'.format((x)))\n",
    "\n",
    "purchasing_analysis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gender Demographics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Percentage and Count of Male Players\n",
    "\n",
    "\n",
    "* Percentage and Count of Female Players\n",
    "\n",
    "\n",
    "* Percentage and Count of Other / Non-Disclosed\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number Of Players</th>\n",
       "      <th>Percentage Of Players</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>484</td>\n",
       "      <td>84.03%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>81</td>\n",
       "      <td>14.06%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other / Non-Disclosed</th>\n",
       "      <td>11</td>\n",
       "      <td>1.91%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Number Of Players Percentage Of Players\n",
       "Gender                                                        \n",
       "Male                                 484                84.03%\n",
       "Female                                81                14.06%\n",
       "Other / Non-Disclosed                 11                 1.91%"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_player =  purchase_data['SN'].nunique()\n",
    "\n",
    "male_player = purchase_data[purchase_data['Gender'] == 'Male']\n",
    "male_player_count = male_player['SN'].nunique()\n",
    "\n",
    "female_player = purchase_data[purchase_data['Gender'] == 'Female']\n",
    "female_player_count = female_player['SN'].nunique()\n",
    "\n",
    "other = purchase_data[purchase_data['Gender'] == 'Other / Non-Disclosed']\n",
    "other_count = other['SN'].nunique()\n",
    "\n",
    "percent_male = round(male_player_count / total_player  * 100, 2) \n",
    "percent_female = round(female_player_count / total_player  * 100, 2)\n",
    "percent_other = round(other_count / total_player * 100, 2)\n",
    "\n",
    "Gender_Demo = pd.DataFrame({'Gender': ['Male', 'Female', 'Other / Non-Disclosed'], \n",
    "                                    'Number Of Players': [male_player_count, female_player_count, other_count], \n",
    "                                    'Percentage Of Players': [percent_male, percent_female, percent_other]})\n",
    "\n",
    "Gender_Demo['Percentage Of Players'] = Gender_Demo['Percentage Of Players'].apply(lambda x: '{:.4}%'.format((x)))\n",
    "\n",
    "Gender_Demo = Gender_Demo.set_index('Gender')\n",
    "Gender_Demo "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Purchasing Analysis (Gender)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display the summary data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Purchase Count</th>\n",
       "      <th>Average Purchase Price</th>\n",
       "      <th>Total Purchase Value</th>\n",
       "      <th>Avg Total Purchasing per Person</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>113</td>\n",
       "      <td>$3.2</td>\n",
       "      <td>$361.94</td>\n",
       "      <td>$4.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>652</td>\n",
       "      <td>$3.02</td>\n",
       "      <td>$1967.64</td>\n",
       "      <td>$4.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other / Non-Disclosed</th>\n",
       "      <td>15</td>\n",
       "      <td>$3.35</td>\n",
       "      <td>$50.19</td>\n",
       "      <td>$4.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Purchase Count Average Purchase Price  \\\n",
       "Gender                                                         \n",
       "Female                            113                   $3.2   \n",
       "Male                              652                  $3.02   \n",
       "Other / Non-Disclosed              15                  $3.35   \n",
       "\n",
       "                      Total Purchase Value Avg Total Purchasing per Person  \n",
       "Gender                                                                      \n",
       "Female                             $361.94                           $4.47  \n",
       "Male                              $1967.64                           $4.07  \n",
       "Other / Non-Disclosed               $50.19                           $4.56  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "female_purchase_count = female_player['Purchase ID'].count()\n",
    "male_purchase_count = male_player['Purchase ID'].count()\n",
    "other_purchase_count = other['Purchase ID'].count()\n",
    "\n",
    "f_average_pp = female_player['Price'].mean()\n",
    "m_average_pp = male_player['Price'].mean()\n",
    "o_average_pp = other['Price'].mean()\n",
    "\n",
    "female_player_rev = female_player['Price'].sum() \n",
    "male_player_rev = male_player['Price'].sum()\n",
    "other_rev = other['Price'].sum()\n",
    "\n",
    "purchase_per_f = female_player['SN'].nunique()\n",
    "purchase_per_m = male_player['SN'].nunique()\n",
    "purchase_per_o = other['SN'].nunique() \n",
    "\n",
    "av_pf = female_player_rev / purchase_per_f\n",
    "av_pm = male_player_rev / purchase_per_m\n",
    "av_po = other_rev / purchase_per_o\n",
    "\n",
    "\n",
    "\n",
    "Gender_PA = pd.DataFrame({'Gender': ['Female', 'Male', 'Other / Non-Disclosed'],\n",
    "                          'Purchase Count': [female_purchase_count, male_purchase_count, other_purchase_count],\n",
    "                          'Average Purchase Price': [f_average_pp, m_average_pp, o_average_pp],\n",
    "                          'Total Purchase Value': [female_player_rev, male_player_rev, other_rev],\n",
    "                          'Avg Total Purchasing per Person': [av_pf, av_pm, av_po]})\n",
    "\n",
    "Gender_PA['Average Purchase Price'] = Gender_PA['Average Purchase Price'].apply(lambda x: '${:.3}'.format((x)))\n",
    "Gender_PA['Total Purchase Value'] = Gender_PA['Total Purchase Value'].apply(lambda x: '${:.6}'.format((x)))\n",
    "Gender_PA['Avg Total Purchasing per Person'] = Gender_PA['Avg Total Purchasing per Person'].apply(lambda x: '${:.3}'.format((x)))\n",
    "\n",
    "Gender_PA = Gender_PA.set_index('Gender')\n",
    "\n",
    "Gender_PA\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Age Demographics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Establish bins for ages\n",
    "\n",
    "\n",
    "* Categorize the existing players using the age bins. Hint: use pd.cut()\n",
    "\n",
    "\n",
    "* Calculate the numbers and percentages by age group\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: round the percentage column to two decimal points\n",
    "\n",
    "\n",
    "* Display Age Demographics Table\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Age</th>        <th class=\"col_heading level0 col1\" >Total Count</th>        <th class=\"col_heading level0 col2\" >Percentage of Players</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row0_col0\" class=\"data row0 col0\" ><10</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row0_col1\" class=\"data row0 col1\" >17</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row0_col2\" class=\"data row0 col2\" >2.95%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row1_col0\" class=\"data row1 col0\" >10-14</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row1_col1\" class=\"data row1 col1\" >22</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row1_col2\" class=\"data row1 col2\" >3.82%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row2_col0\" class=\"data row2 col0\" >15-19</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row2_col1\" class=\"data row2 col1\" >107</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row2_col2\" class=\"data row2 col2\" >18.6%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row3_col0\" class=\"data row3 col0\" >20-24</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row3_col1\" class=\"data row3 col1\" >258</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row3_col2\" class=\"data row3 col2\" >44.8%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row4_col0\" class=\"data row4 col0\" >25-29</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row4_col1\" class=\"data row4 col1\" >77</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row4_col2\" class=\"data row4 col2\" >13.4%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row5_col0\" class=\"data row5 col0\" >30-34</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row5_col1\" class=\"data row5 col1\" >52</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row5_col2\" class=\"data row5 col2\" >9.03%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row6_col0\" class=\"data row6 col0\" >35-39</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row6_col1\" class=\"data row6 col1\" >31</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row6_col2\" class=\"data row6 col2\" >5.38%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row7_col0\" class=\"data row7 col0\" >40+</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row7_col1\" class=\"data row7 col1\" >12</td>\n",
       "                        <td id=\"T_91a0e4e6_166b_11eb_9c4c_fcaa149ff265row7_col2\" class=\"data row7 col2\" >2.08%</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x2473803fe80>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "purchase_data2 = purchase_data\n",
    "purchase_data2['Age_Bins'] = pd.cut(x = purchase_data['Age'], \n",
    "                                    bins = [0,9,14,19,24,29,34,39,100],\n",
    "                                    labels = ['<10', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40+'])\n",
    "\n",
    "\n",
    "age_count1 = purchase_data2[purchase_data2['Age_Bins'] == '<10']\n",
    "age_10 = age_count1['SN'].nunique()\n",
    "age_10_p = round(age_10 / total_player * 100, 2)\n",
    "\n",
    "\n",
    "age_count2 = purchase_data2[purchase_data2['Age_Bins'] == '10-14']\n",
    "age_14 = age_count2['SN'].nunique()\n",
    "age_14_p = round(age_14 / total_player * 100, 2)\n",
    "\n",
    "age_count3 = purchase_data2[purchase_data2['Age_Bins'] == '15-19']\n",
    "age_19 = age_count3['SN'].nunique()\n",
    "age_19_p = round(age_19 / total_player * 100, 2)\n",
    "\n",
    "age_count4 = purchase_data2[purchase_data2['Age_Bins'] == '20-24']\n",
    "age_24 = age_count4['SN'].nunique()\n",
    "age_24_p = round(age_24 / total_player * 100, 2)\n",
    "\n",
    "age_count5 = purchase_data2[purchase_data2['Age_Bins'] == '25-29']\n",
    "age_29 = age_count5['SN'].nunique()\n",
    "age_29_p = round(age_29 / total_player * 100, 2)\n",
    "\n",
    "age_count6 = purchase_data2[purchase_data2['Age_Bins'] == '30-34']\n",
    "age_34 = age_count6['SN'].nunique()\n",
    "age_34_p = round(age_34 / total_player * 100, 2)\n",
    "\n",
    "age_count7 = purchase_data2[purchase_data2['Age_Bins'] == '35-39']\n",
    "age_39 = age_count7['SN'].nunique()\n",
    "age_39_p = round(age_39 / total_player * 100, 2)\n",
    "\n",
    "age_count8 = purchase_data2[purchase_data2['Age_Bins'] == '40+']\n",
    "age_100 = age_count8['SN'].nunique()\n",
    "age_100_p = round(age_100 / total_player * 100, 2)\n",
    "\n",
    "Age_Demo = pd.DataFrame({'Age': ['<10', '10-14', '15-19','20-24','25-29','30-34','35-39', '40+'], \n",
    "                                    'Total Count': [age_10, age_14, age_19, age_24, age_29, age_34, age_39, age_100 ], \n",
    "                                    'Percentage of Players': [age_10_p, age_14_p, age_19_p, age_24_p, age_29_p, age_34_p, age_39_p, age_100_p]})\n",
    "\n",
    "Age_Demo['Percentage of Players'] = Age_Demo['Percentage of Players'].apply(lambda x: '{:.3}%'.format((x)))\n",
    "\n",
    "Age_Demo.style.hide_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Purchasing Analysis (Age)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Bin the purchase_data data frame by age\n",
    "\n",
    "\n",
    "* Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display the summary data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Purchase Count</th>\n",
       "      <th>Average Purchase Price</th>\n",
       "      <th>Total Purchase Value</th>\n",
       "      <th>Avg Total Purchasing per Person</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age Range</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>&lt;10</th>\n",
       "      <td>23</td>\n",
       "      <td>$3.35</td>\n",
       "      <td>$77.13</td>\n",
       "      <td>$4.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10-14</th>\n",
       "      <td>28</td>\n",
       "      <td>$2.96</td>\n",
       "      <td>$82.78</td>\n",
       "      <td>$3.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15-19</th>\n",
       "      <td>136</td>\n",
       "      <td>$3.04</td>\n",
       "      <td>$412.89</td>\n",
       "      <td>$3.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20-24</th>\n",
       "      <td>365</td>\n",
       "      <td>$3.05</td>\n",
       "      <td>$1114.06</td>\n",
       "      <td>$4.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25-29</th>\n",
       "      <td>101</td>\n",
       "      <td>$2.9</td>\n",
       "      <td>$293.0</td>\n",
       "      <td>$3.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30-34</th>\n",
       "      <td>73</td>\n",
       "      <td>$2.93</td>\n",
       "      <td>$214.0</td>\n",
       "      <td>$4.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35-39</th>\n",
       "      <td>41</td>\n",
       "      <td>$3.6</td>\n",
       "      <td>$147.67</td>\n",
       "      <td>$4.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40+</th>\n",
       "      <td>13</td>\n",
       "      <td>$2.94</td>\n",
       "      <td>$38.24</td>\n",
       "      <td>$3.19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Purchase Count Average Purchase Price Total Purchase Value  \\\n",
       "Age Range                                                               \n",
       "<10                    23                  $3.35               $77.13   \n",
       "10-14                  28                  $2.96               $82.78   \n",
       " 15-19                136                  $3.04              $412.89   \n",
       "20-24                 365                  $3.05             $1114.06   \n",
       "25-29                 101                   $2.9               $293.0   \n",
       "30-34                  73                  $2.93               $214.0   \n",
       "35-39                  41                   $3.6              $147.67   \n",
       "40+                    13                  $2.94               $38.24   \n",
       "\n",
       "          Avg Total Purchasing per Person  \n",
       "Age Range                                  \n",
       "<10                                 $4.54  \n",
       "10-14                               $3.76  \n",
       " 15-19                              $3.86  \n",
       "20-24                               $4.32  \n",
       "25-29                               $3.81  \n",
       "30-34                               $4.12  \n",
       "35-39                               $4.76  \n",
       "40+                                 $3.19  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "age_10_pc = age_count1['Purchase ID'].count()\n",
    "age_14_pc = age_count2['Purchase ID'].count()\n",
    "age_19_pc = age_count3['Purchase ID'].count()\n",
    "age_24_pc = age_count4['Purchase ID'].count()\n",
    "age_29_pc = age_count5['Purchase ID'].count()\n",
    "age_34_pc = age_count6['Purchase ID'].count()\n",
    "age_39_pc = age_count7['Purchase ID'].count()\n",
    "age_100_pc = age_count8['Purchase ID'].count()\n",
    "\n",
    "age_10_av = age_count1['Price'].mean()\n",
    "age_14_av = age_count2['Price'].mean()\n",
    "age_19_av = age_count3['Price'].mean()\n",
    "age_24_av = age_count4['Price'].mean()\n",
    "age_29_av = age_count5['Price'].mean()\n",
    "age_34_av = age_count6['Price'].mean()\n",
    "age_39_av = age_count7['Price'].mean()\n",
    "age_100_av = age_count8['Price'].mean()\n",
    "\n",
    "age_10_rev = age_count1['Price'].sum()\n",
    "age_14_rev = age_count2['Price'].sum()\n",
    "age_19_rev = age_count3['Price'].sum()\n",
    "age_24_rev = age_count4['Price'].sum()\n",
    "age_29_rev = age_count5['Price'].sum()\n",
    "age_34_rev = age_count6['Price'].sum()\n",
    "age_39_rev = age_count7['Price'].sum()\n",
    "age_100_rev = age_count8['Price'].sum()\n",
    "\n",
    "age_10_app = age_10_rev / age_10\n",
    "age_14_app = age_14_rev / age_14\n",
    "age_19_app = age_19_rev / age_19\n",
    "age_24_app = age_24_rev / age_24\n",
    "age_29_app = age_29_rev / age_29\n",
    "age_34_app = age_34_rev / age_34\n",
    "age_39_app = age_39_rev / age_39\n",
    "age_100_app = age_100_rev / age_100\n",
    "\n",
    "Age_PA = pd.DataFrame({'Age Range': ['<10', '10-14',' 15-19', '20-24', '25-29', '30-34', '35-39', '40+'],\n",
    "                          'Purchase Count': [age_10_pc, age_14_pc, age_19_pc, age_24_pc, age_29_pc, age_34_pc, age_39_pc, age_100_pc],\n",
    "                          'Average Purchase Price': [age_10_av, age_14_av, age_19_av, age_24_av, age_29_av, age_34_av, age_39_av, age_100_av],\n",
    "                          'Total Purchase Value': [age_10_rev, age_14_rev, age_19_rev, age_24_rev, age_29_rev, age_34_rev, age_39_rev, age_100_rev],\n",
    "                          'Avg Total Purchasing per Person': [age_10_app , age_14_app, age_19_app, age_24_app, age_29_app, age_34_app, age_39_app, age_100_app]})\n",
    "\n",
    "Age_PA['Average Purchase Price'] = Age_PA['Average Purchase Price'].apply(lambda x: '${:.3}'.format((x)))\n",
    "Age_PA['Total Purchase Value'] = Age_PA['Total Purchase Value'].apply(lambda x: '${:.6}'.format((x)))\n",
    "Age_PA['Avg Total Purchasing per Person'] = Age_PA['Avg Total Purchasing per Person'].apply(lambda x: '${:.3}'.format((x)))\n",
    "\n",
    "Age_PA = Age_PA.set_index('Age Range')\n",
    "Age_PA\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Top Spenders"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Run basic calculations to obtain the results in the table below\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Sort the total purchase value column in descending order\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display a preview of the summary data frame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Purchase Count</th>\n",
       "      <th>Average Purchase Price</th>\n",
       "      <th>Total Purchase Value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SN</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Lisosia93</th>\n",
       "      <td>5</td>\n",
       "      <td>$3.79</td>\n",
       "      <td>$18.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idastidru52</th>\n",
       "      <td>4</td>\n",
       "      <td>$3.86</td>\n",
       "      <td>$15.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chamjask73</th>\n",
       "      <td>3</td>\n",
       "      <td>$4.61</td>\n",
       "      <td>$13.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iral74</th>\n",
       "      <td>4</td>\n",
       "      <td>$3.4</td>\n",
       "      <td>$13.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iskadarya95</th>\n",
       "      <td>3</td>\n",
       "      <td>$4.37</td>\n",
       "      <td>$13.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Purchase Count Average Purchase Price Total Purchase Value\n",
       "SN                                                                     \n",
       "Lisosia93                 5                  $3.79               $18.96\n",
       "Idastidru52               4                  $3.86               $15.45\n",
       "Chamjask73                3                  $4.61               $13.83\n",
       "Iral74                    4                   $3.4               $13.62\n",
       "Iskadarya95               3                  $4.37                $13.1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_purchases_data = purchase_data.groupby(\"SN\").agg({'Price':['sum', 'mean'],\n",
    "                                                        'Item ID': 'count'})\n",
    "def f(x):\n",
    "    d = {}\n",
    "    d['Purchase Count'] = x['Item ID'].nunique()\n",
    "    d['Average Purchase Price'] = round(x['Price'].mean(),2)\n",
    "    d['Total Purchase Value'] = round(x['Price'].sum(), 2)\n",
    "    return pd.Series(d, index=['Purchase Count', 'Average Purchase Price','Total Purchase Value'])\n",
    "\n",
    "player_pd = purchase_data.groupby('SN').apply(f)\n",
    "\n",
    "player_pd_sort = player_pd.sort_values(by = \"Total Purchase Value\", ascending = False)\n",
    "player_pd_sort.loc[:,'Purchase Count'] = player_pd_sort['Purchase Count'].astype(int)\n",
    "\n",
    "player_pd_sort['Average Purchase Price'] = player_pd_sort['Average Purchase Price'].apply(lambda x: '${:.3}'.format((x)))\n",
    "player_pd_sort['Total Purchase Value'] = player_pd_sort['Total Purchase Value'].apply(lambda x: '${:.4}'.format((x)))\n",
    "\n",
    "player_pd_sort.head()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most Popular Items"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Retrieve the Item ID, Item Name, and Item Price columns\n",
    "\n",
    "\n",
    "* Group by Item ID and Item Name. Perform calculations to obtain purchase count, average item price, and total purchase value\n",
    "\n",
    "\n",
    "* Create a summary data frame to hold the results\n",
    "\n",
    "\n",
    "* Sort the purchase count column in descending order\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display a preview of the summary data frame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Purchase Count</th>\n",
       "      <th>Average Purchase Price</th>\n",
       "      <th>Total Purchase Value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Item Name</th>\n",
       "      <th>Item ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Final Critic</th>\n",
       "      <th>92</th>\n",
       "      <td>13</td>\n",
       "      <td>$4.61</td>\n",
       "      <td>$59.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oathbreaker, Last Hope of the Breaking Storm</th>\n",
       "      <th>178</th>\n",
       "      <td>11</td>\n",
       "      <td>$4.23</td>\n",
       "      <td>$50.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Persuasion</th>\n",
       "      <th>132</th>\n",
       "      <td>9</td>\n",
       "      <td>$3.22</td>\n",
       "      <td>$28.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extraction, Quickblade Of Trembling Hands</th>\n",
       "      <th>108</th>\n",
       "      <td>9</td>\n",
       "      <td>$3.53</td>\n",
       "      <td>$31.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nirvana</th>\n",
       "      <th>82</th>\n",
       "      <td>9</td>\n",
       "      <td>$4.9</td>\n",
       "      <td>$44.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      Purchase Count  \\\n",
       "Item Name                                    Item ID                   \n",
       "Final Critic                                 92                   13   \n",
       "Oathbreaker, Last Hope of the Breaking Storm 178                  11   \n",
       "Persuasion                                   132                   9   \n",
       "Extraction, Quickblade Of Trembling Hands    108                   9   \n",
       "Nirvana                                      82                    9   \n",
       "\n",
       "                                                     Average Purchase Price  \\\n",
       "Item Name                                    Item ID                          \n",
       "Final Critic                                 92                       $4.61   \n",
       "Oathbreaker, Last Hope of the Breaking Storm 178                      $4.23   \n",
       "Persuasion                                   132                      $3.22   \n",
       "Extraction, Quickblade Of Trembling Hands    108                      $3.53   \n",
       "Nirvana                                      82                        $4.9   \n",
       "\n",
       "                                                     Total Purchase Value  \n",
       "Item Name                                    Item ID                       \n",
       "Final Critic                                 92                    $59.99  \n",
       "Oathbreaker, Last Hope of the Breaking Storm 178                   $50.76  \n",
       "Persuasion                                   132                   $28.99  \n",
       "Extraction, Quickblade Of Trembling Hands    108                   $31.77  \n",
       "Nirvana                                      82                     $44.1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_pd2 = purchase_data.groupby(['Item Name', 'Item ID']).apply(f)\n",
    "purchase_value_count = player_pd2['Total Purchase Value']/player_pd2['Average Purchase Price']\n",
    "\n",
    "player_pd2[\"Purchase Count\"] = purchase_value_count\n",
    "player_pd3 = player_pd2\n",
    "\n",
    "player_pd2 = player_pd2.sort_values(by = \"Purchase Count\", ascending = False)\n",
    "\n",
    "player_pd2['Total Purchase Value'] = player_pd2['Total Purchase Value'].apply(lambda x: '${:.4}'.format((x)))\n",
    "player_pd2['Average Purchase Price'] = player_pd2['Average Purchase Price'].apply(lambda x: '${:.3}'.format((x)))\n",
    "player_pd2.loc[:,'Purchase Count'] = player_pd2['Purchase Count'].astype(int)\n",
    "\n",
    "player_pd2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most Profitable Items"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Sort the above table by total purchase value in descending order\n",
    "\n",
    "\n",
    "* Optional: give the displayed data cleaner formatting\n",
    "\n",
    "\n",
    "* Display a preview of the data frame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Purchase Count</th>\n",
       "      <th>Average Purchase Price</th>\n",
       "      <th>Total Purchase Value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Item Name</th>\n",
       "      <th>Item ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Final Critic</th>\n",
       "      <th>92</th>\n",
       "      <td>$13.0</td>\n",
       "      <td>$4.61</td>\n",
       "      <td>$59.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oathbreaker, Last Hope of the Breaking Storm</th>\n",
       "      <th>178</th>\n",
       "      <td>$12.0</td>\n",
       "      <td>$4.23</td>\n",
       "      <td>$50.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nirvana</th>\n",
       "      <th>82</th>\n",
       "      <td>$9.0</td>\n",
       "      <td>$4.9</td>\n",
       "      <td>$44.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiery Glass Crusader</th>\n",
       "      <th>145</th>\n",
       "      <td>$9.0</td>\n",
       "      <td>$4.58</td>\n",
       "      <td>$41.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Singed Scalpel</th>\n",
       "      <th>103</th>\n",
       "      <td>$8.0</td>\n",
       "      <td>$4.35</td>\n",
       "      <td>$34.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     Purchase Count  \\\n",
       "Item Name                                    Item ID                  \n",
       "Final Critic                                 92               $13.0   \n",
       "Oathbreaker, Last Hope of the Breaking Storm 178              $12.0   \n",
       "Nirvana                                      82                $9.0   \n",
       "Fiery Glass Crusader                         145               $9.0   \n",
       "Singed Scalpel                               103               $8.0   \n",
       "\n",
       "                                                     Average Purchase Price  \\\n",
       "Item Name                                    Item ID                          \n",
       "Final Critic                                 92                       $4.61   \n",
       "Oathbreaker, Last Hope of the Breaking Storm 178                      $4.23   \n",
       "Nirvana                                      82                        $4.9   \n",
       "Fiery Glass Crusader                         145                      $4.58   \n",
       "Singed Scalpel                               103                      $4.35   \n",
       "\n",
       "                                                     Total Purchase Value  \n",
       "Item Name                                    Item ID                       \n",
       "Final Critic                                 92                    $59.99  \n",
       "Oathbreaker, Last Hope of the Breaking Storm 178                   $50.76  \n",
       "Nirvana                                      82                     $44.1  \n",
       "Fiery Glass Crusader                         145                   $41.22  \n",
       "Singed Scalpel                               103                    $34.8  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decending = player_pd3.sort_values(by = 'Total Purchase Value', ascending = False)\n",
    "\n",
    "decending['Total Purchase Value'] = decending['Total Purchase Value'].apply(lambda x: '${:.4}'.format((x)))\n",
    "decending['Average Purchase Price'] = decending['Average Purchase Price'].apply(lambda x: '${:.3}'.format((x)))\n",
    "decending['Purchase Count'] = decending['Purchase Count'].apply(lambda x: '${:.3}'.format((x)))\n",
    "\n",
    "decending.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nteract": {
   "version": "0.2.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
